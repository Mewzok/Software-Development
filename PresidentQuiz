import java.text.DecimalFormat;
import java.util.*;
import java.io.*;
public class PresidentQuiz {
    public static void main(String[] args) {
        // declare variables
        String[][] presidents = {
            {"1", "George Washington", "1789-1797", "No Party"},
            {"2", "John Adams", "1797-1801", "Federalist"},
            {"3", "Thomas Jefferson", "1801-1809", "Democratic-Republican"},
            {"4", "James Madison", "1809-1817", "Democratic-Republican"},
            {"5", "James Monroe", "1817-1825", "Democratic-Republican"},
            {"6", "John Quincy Adams", "1825-1829", "Democratic-Republican"},
            {"7", "Andrew Jackson", "1829-1837", "Democratic"},
            {"8", "Martin Van Buren", "1837-1841", "Democratic"},
            {"9", "William Henry Harrison", "1841", "Whig"},
            {"10", "John Tyler", "1841-1845", "Whig/Unaffiliated"},
            {"11", "James K. Polk", "1845-1849", "Democratic"},
            {"12", "Zachary Taylor", "1849-1850", "Whig"},
            {"13", "Millard Fillmore", "1850-1853", "Whig"},
            {"14", "Franklin Pierce", "1853-1857", "Democratic"},
            {"15", "James Buchanan", "1857-1861", "Democratic"},
            {"16", "Abraham Lincoln", "1861-1865", "Republican/National Union"},
            {"17", "Andrew Johnson", "1865-1869", "Democratic/National Union"},
            {"18", "Ulysses S. Grant", "1869-1877", "Republican"},
            {"19", "Rutherford B. Hayes", "1877-1881", "Republican"},
            {"20", "James A. Garfield", "1881", "Republican"},
            {"21", "Chester A. Arthur", "1881-1885", "Republican"},
            {"22, 24", "Grover Cleveland", "1885-1889, 1893-1897", "Democratic"},
            {"23", "Benjamin Harrison", "1889-1893", "Republican"},
            {"25", "William McKinley", "1897-1901", "Republican"},
            {"26", "Theodore Roosevelt", "1901-1909", "Republican"},
            {"27", "William Howard Taft", "1909-1913", "Republican"},
            {"28", "Woodrow Wilson", "1913-1921", "Democratic"},
            {"29", "Warren G. Harding", "1921-1923", "Republican"},
            {"30", "Calvin Coolidge", "1923-1929", "Republican"},
            {"31", "Herbert Hoover", "1929-1933", "Republican"},
            {"32", "Franklin D. Roosevelt", "1933-1945", "Democratic"},
            {"33", "Harry S. Truman", "1945-1953", "Democratic"},
            {"34", "Dwight D. Eisenhower", "1953-1961", "Republican"},
            {"35", "John F. Kennedy", "1961-1963", "Democratic"},
            {"36", "Lyndon B. Johnson", "1963-1969", "Democratic"},
            {"37", "Richard Nixon", "1969-1974", "Republican"},
            {"38", "Gerald Ford", "1974-1977", "Republican"},
            {"39", "Jimmy Carter", "1977-1981", "Democratic"},
            {"40", "Ronald Reagan", "1981-1989", "Republican"},
            {"41", "George H. W. Bush", "1989-1993", "Republican"},
            {"42", "Bill Clinton", "1993-2001", "Democratic"},
            {"43", "George W. Bush", "2001-2009", "Republican"},
            {"44", "Barack Obama", "2009-2017", "Democratic"},
            {"45, 47", "Donald Trump", "2017-2021, 2025-", "Republican"},
            {"46", "Joe Biden", "2021-2025", "Democratic"}
        };
        int mainMenuChoice = 0;
        String gamemodeY = "years served";
        String gamemodeN = "president number";
        String currentGamemode = "";
        String[] highscores = new String[5];
        String[] m2highscores = new String[5];

        String filePath = "config.properties";
        File file = new File(filePath);

        // check if config file exists and create if not
        if(!file.exists()) {
            manageProperties();
        }

        // load properties
        Properties p = new Properties();
        try(FileInputStream in = new FileInputStream(filePath)) {
            p.load(in);

            currentGamemode = p.getProperty("gamemode");
            highscores[0] = p.getProperty("highscoreeasy");
            highscores[1] = p.getProperty("highscoremedium");
            highscores[2] = p.getProperty("highscorehard");
            highscores[3] = p.getProperty("highscoreall");
            highscores[4] = p.getProperty("highscorecustom");
            m2highscores[0] = p.getProperty("numberhighscoreeasy");
            m2highscores[1] = p.getProperty("numberhighscoremedium");
            m2highscores[2] = p.getProperty("numberhighscorehard");
            m2highscores[3] = p.getProperty("numberhighscoreall");
            m2highscores[4] = p.getProperty("numberhighscorecustom");
        } catch(IOException e) {
            e.printStackTrace();
        }

        System.out.println("Current gamemode: " + currentGamemode);

        while(mainMenuChoice != 4) {
            // display main menu and return user input
            mainMenuChoice = displayMainMenu();

            if(mainMenuChoice == 1) {
                if(currentGamemode.equals(gamemodeY)) {
                    beginQuiz(presidents, highscores, currentGamemode);
                } else {
                    beginQuiz(presidents, m2highscores, currentGamemode);
                }
            }

            if(mainMenuChoice == 2) {
                currentGamemode = changeMode(currentGamemode, gamemodeY, gamemodeN);

                saveNewProperties("gamemode", currentGamemode);
            }
        }
    }

    public static int displayMainMenu() {
        // declare variablesÂ¡
        int userInput = -1;

        Scanner input = new Scanner(System.in);

        // display main menu options and accept input
        System.out.println("1) Begin Quiz");
        System.out.println("2) Change Mode");
        System.out.println("3) Options");
        System.out.println("4) Exit");
        while(userInput == -1) {
            userInput = input.nextInt();

            if(userInput < 1 || userInput > 3) {
                System.out.println("Invalid input.");
                userInput = -1;
            }
        }

        return userInput;
    }

    public static void beginQuiz(String[][] pres, String[] hiScores, String gamemodeString) {
        String[][] randomPres = randomizePresidents(pres);
        String userAnswer = "";
        String difficultyString = "";
        int difficulty = -1;
        int quizLength = -1;
        double score = 0;
        DecimalFormat df = new DecimalFormat("##.##");

        Scanner input = new Scanner(System.in);

        // display current gamemode
        System.out.println("\nCurrent game mode is " + gamemodeString);

        while(difficulty == -1) {
            System.out.println("Select difficulty\n1) Easy\n2) Medium\n3) Hard\n4) All\n5) Custom");
            difficulty = input.nextInt();

            if(difficulty < 1 || difficulty > 5) {
                System.out.println("Invalid input.");
                difficulty = -1;
            }
        }

        switch(difficulty) {
            case 1:
                quizLength = 5;
                difficultyString = "easy";
                break;
            case 2:
                quizLength = 10;
                difficultyString = "medium";
                break;
            case 3:
                quizLength = 25;
                difficultyString = "hard";
                break;
            case 4:
                quizLength = pres.length;
                difficultyString = "all";
                break;
            case 5:
                System.out.println("Enter custom number: ");
                while(quizLength < 0 || quizLength > pres.length) {
                    try {
                        quizLength = input.nextInt();
                    } catch(Exception e) {
                        System.out.println("Invalid number.");
                    }
                }
                difficultyString = "custom";
                break;
            }

                System.out.println("Beginning quiz with " + quizLength + " questions.");

            // years served instructions
            if(gamemodeString.equals("years served")) {
                System.out.println("Type dates as 0000-0000");
                System.out.println("For one year presidents, type dates as 0000");
                System.out.println("For non-consecutive term presidents, type dates as 0000-0000 0000-0000");
                System.out.println("If a president is still in office, type date as 0000-");
                System.out.println("Current high score for " + difficultyString + " difficulty: " + 
                df.format(Double.parseDouble(hiScores[difficulty-1])) + "/" + quizLength);
                System.out.println();
                input.nextLine();
            } else { // number instructions
                System.out.println("Type president's number");
                System.out.println("For non-consecutive term presidents, type number as 00-00");
                // add high scores
            }

        // determine questions at quiz length
        for(int i = 0; i < quizLength; i++) {
            System.out.println(randomPres[i][1]);
            userAnswer = input.nextLine();

            // testing
            if(userAnswer.equals("1")) {
                System.out.println("Correct.");
                score++;
            }
            /*
            // add extra conditions, eg. 1841-1841 still counts
            if(userAnswer.equals(randomPres[i][2])) {
                System.out.println("Correct.");
                score += 1.5;
            } */
            else {
                System.out.println("Incorrect. The correct answer is " + randomPres[i][2]);
            }
        }

        // display final score, save high score
        finalScore(score, quizLength, difficulty, difficultyString, hiScores, gamemodeString);
    }

    public static String changeMode(String gameMode, String gm1, String gm2) {
        String userString = "";

        Scanner input = new Scanner(System.in);

        if(gameMode.equals(gm1)) {
            System.out.println("Current game mode is years served.");
            System.out.println("Change to " + gm2 + "? (Y/N)");
            userString = input.nextLine();

            if(Character.toLowerCase((userString.charAt(0))) == 'y') {
                gameMode = gm2;
                System.out.println("\n-Gamemode set to " + gameMode);
            }
        } else {
            System.out.println("Current game mode is president number.");
            System.out.println("Change to " + gm1 + "? (Y/N)");
            userString = input.nextLine();

            if(Character.toLowerCase((userString.charAt(0))) == 'y') {
                gameMode = gm1;
                System.out.println("\n-Gamemode set to " + gameMode);
            }
        }

        System.out.println();

        return gameMode;
    }

    public static void displayOptions() {

    }

    public static String[][] randomizePresidents(String[][] pres) {
        // declare variables
        String[][] randomPres = new String[45][4];
        Random random = new Random();

        // copy array
        for(int i = 0; i < pres.length; i++) {
            randomPres[i] = pres[i].clone();
        }

        // randomize presidents
        for(int i = randomPres.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);

            // swap
            String[] temp = randomPres[i];
            randomPres[i] = randomPres[j];
            randomPres[j] = temp;
        }

        return randomPres;
    }

    public static void finalScore(double finalScoreNum, int totalScore, int diff, String diffName,
     String[] hiscoreStrings, String gamemodeString) {
        DecimalFormat df = new DecimalFormat("##.##");
        String keyName = "";
        String scorePercent = String.format("%.2f%%", (finalScoreNum/totalScore) * 100);
        System.out.println("Final score: " + df.format(finalScoreNum) + "/" + totalScore + ". " + scorePercent + "\n");

        if(gamemodeString.equals("years served")) {
            keyName = "highscore" + diffName;
        } else {
            keyName = "numberhighscore" + diffName;
        }

        if(finalScoreNum > Double.parseDouble(hiscoreStrings[diff-1])) {
            System.out.println("New high score");
            saveNewProperties(keyName, String.valueOf(finalScoreNum));
        }
    }

    public static void manageProperties() {
        String filePath = "config.properties";
        Properties p = new Properties();

        p.setProperty("gamemode", "years served");
        p.setProperty("highscoreeasy", "0");
        p.setProperty("highscoremedium", "0");
        p.setProperty("highscorehard", "0");
        p.setProperty("highscoreall", "0");
        p.setProperty("highscorecustom", "0");
        p.setProperty("numberhighscoreeasy", "0");
        p.setProperty("numberhighscoremedium", "0");
        p.setProperty("numberhighscorehard", "0");
        p.setProperty("numberhighscoreall", "0");
        p.setProperty("numberhighscorecustom", "0");

        try (FileOutputStream output = new FileOutputStream(filePath)) {
            p.store(output, "Default properties");
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

    public static void saveNewProperties(String key, String value) {
        String filePath = "config.properties";
        Properties p = new Properties();

        try(FileInputStream in = new FileInputStream(filePath)) {
            p.load(in);

            p.setProperty(key, value);

            try (FileOutputStream output = new FileOutputStream(filePath)) {
                p.store(output, "Updated high score");
            } catch(IOException e) {
                e.printStackTrace();
            }
        } catch(IOException e) {
            e.printStackTrace();
        }
    }
}
